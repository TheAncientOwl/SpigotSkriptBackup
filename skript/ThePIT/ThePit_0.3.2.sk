#Dev: Bufnita aka TheAncientOwl
#Version: 0.3.2
#-> Added passive perks - Improved the look of code - Added some options <-#
options:
	error: &cSyntax error!
	cmdColor: &7
	cmdPrefix: &8[&e&l!&8]&a/pit
	pn: &b<player> &3<number>
	ender_chest_min_level: 15
	kill-xp: 15
	kill-gold: 15
	assist-gold: 5
	assist-xp: 5
	bounty-multiplicator: 50
	minStreakToBeBountied: 5
	kill-sound: "ENTITY_EXPERIENCE_ORB_PICKUP"
	chat-format: "{prestige}[{color}{level}{prestige}] {prefix}{player} &8&l- &7{message}"
	name-format: "{prestige}[{color}{level}{prestige}] {prefix}{player}"
	nametag-format: "{prestige_color}[{level_color}{level}{prestige_color}] {prefix}"
	bounty-nametag-format: "&r &7(&6{gold}&7)"
	message-item-purchase: "&a&lPurchased &7{item} for &6{gold}g"
	message-not-enough-gold: "&c&lNot enough gold &7to buy {item}"
	messageUpgradeBought: &a&lUpgrade set!
	messageMaxUpgrade: &c&lMax Upgrade!
	messageNotEnoughGoldToUpgrade: &c&lNot enough gold to upgrade!
#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-#
#                  ON					  #
#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-#
# DEATH EVENTS
on damage of player:
	if damage cause is fall:
		cancel event
	if damage cause is void:
		cancel event
		teleport victim to {pit.spawn}
		kill victim
		heal victim by 10 hearts
	set {_uuid} to uuid of victim
	if {passive-upgrades.%{_uuid}%.damage-reduction} > 0:
		set {_lvl} to {passive-upgrades.%{_uuid}%.damage-reduction}
		if {_lvl} is 1:
			heal victim by 0.40 hearts
		else:
			if {_lvl} is 2:
				heal victim by 0.50 hearts
			else:
				if {_lvl} is 3:
					heal victim by 0.60 hearts
				else:
					if {_lvl} is 4:
						heal victim by 0.70 hearts
					else:
						heal victim by 0.80 hearts
	if damage cause is attack:
		if {pit.%uuid of victim%.streak} >= 5:
			if attacker is holding a diamond_sword:
				wait 0.1 seconds
				#damage victim by 3 hearts
				send "boing" to attacker
	if "%damage cause%" is "projectile":
		give 3 arrows to attacker	
		send "bau" to attacker
	#if attacker is holding a diamond_sword:
		#damage victim by 0.70 hearts
	if attacker is holding a bow:
		set {_uuid} to uuid of attacker
		if {passive-upgrades.%{_uuid}%.bow-damage} > 0:
			set {_lvl} to {passive-upgrades.%{_uuid}%.bow-damage}
			if {_lvl} is 1:
				damage victim by 0.40 hearts
			else:
				if {_lvl} is 2:
					damage victim by 0.50 hearts
				else:
					if {_lvl} is 3:
						damage victim by 0.60 hearts
					else:
						if {_lvl} is 4:
							damage victim by 0.70 hearts
						else:
							damage victim by 0.80 hearts
	if attacker is holding a sword:
		set {_uuid} to uuid of attacker
		if {passive-upgrades.%{_uuid}%.melee-damage} > 0:
			set {_lvl} to {passive-upgrades.%{_uuid}%.melee-damage}
			if {_lvl} is 1:
				damage victim by 0.50 hearts
			else:
				if {_lvl} is 2:
					damage victim by 0.60 hearts
				else:
					if {_lvl} is 3:
						damage victim by 0.70 hearts
					else:
						if {_lvl} is 4:
							damage victim by 0.90 hearts
						else:
							damage victim by 1 hearts
	if attacker is player:
		if attacker is not victim:	
			wait 1 tick
			loop 20 times:
				set {_health.%loop-integer%.%victim%} to "&7❤"
				loop-integer is greater than max health of victim
				set {_health.%loop-integer%.%victim%} to ""
			loop rounded health of victim times:
				set {_health.%loop-integer%.%victim%} to "&4❤"
			set action bar of attacker to coloured "%{_health.1.%victim%}%%{_health.2.%victim%}%%{_health.3.%victim%}%%{_health.4.%victim%}%%{_health.5.%victim%}%%{_health.6.%victim%}%%{_health.7.%victim%}%%{_health.8.%victim%}%%{_health.9.%victim%}%%{_health.10.%victim%}%%{_health.11.%victim%}%%{_health.12.%victim%}%%{_health.13.%victim%}%%{_health.14.%victim%}%%{_health.15.%victim%}%%{_health.16.%victim%}%%{_health.17.%victim%}%%{_health.18.%victim%}%%{_health.19.%victim%}%%{_health.20.%victim%}%"
			set {_sec.%uuid of victim%} to 10
			set {_sec.%uuid of attacker%} to 10
			if {pit.%uuid of victim%.status} is "&aIdling":
				set {pit.%uuid of victim%.status} to "&cFighting"
				pit_scoreboard(victim)
				while {pit.%uuid of victim%.status} is "&cFighting":
					remove 1 from {_sec.%uuid of victim%}
					wait 1 seconds
					if {_sec.%uuid of victim%} is 0:
						set {pit.%uuid of victim%.status} to "&aIdling"
						pit_scoreboard(victim)
			if {pit.%uuid of attacker%.status} is "&aIdling":
				set {pit.%uuid of attacker%.status} to "&cFighting"
				pit_scoreboard(attacker)
				while {pit.%uuid of attacker%.status} is "&cFighting":
					remove 1 from {_sec.%uuid of attacker%}
					wait 1 seconds
					if {_sec.%uuid of attacker%} is 0:
						set {pit.%uuid of attacker%.status} to "&aIdling"
						pit_scoreboard(attacker)
			set {_dmg} to damage
			add rounded {_dmg} to {pit.%uuid of victim%.damage::%uuid of attacker%} 
			if {pit.%uuid of victim%.damage::%uuid of attacker%}  > 10:
				set metadata value "ASSIST" of victim to attacker
				delete {pit.%uuid of victim%.damage::%uuid of attacker%} 
				while {_sec.assist.%uuid of victim%} > 1:
					remove 1 from {_sec.assist.%uuid of victim%}
					wait 1 seconds
					{_sec.assist.%uuid of victim%} = 1:
						delete metadata value "ASSIST" of victim
on death of player:
	play sound {@kill-sound} to attacker with volume 100 and pitch 100
	set action bar of attacker to coloured "&7&l%victim% &a&lKILL"
	#pit_give_gp(attacker)
	#
	set {_attackerName} to {@name-format}
	replace all "{prestige}" with pit_get_prestige_color(attacker) in {_attackerName}
	replace all "{color}" with pit_get_color(attacker) in {_attackerName}
	replace all "{level}" with "%{pit.%uuid of attacker%.level}%" in {_attackerName}
	replace all "{prefix}" with attacker's prefix in {_attackerName}
	replace all "{player}" with "%attacker%" in {_attackerName}
	#
	set {_victimName} to {@name-format}
	replace all "{prestige}" with pit_get_prestige_color(victim) in {_victimName}
	replace all "{color}" with pit_get_color(victim) in {_victimName}
	replace all "{level}" with "%{pit.%uuid of victim%.level}%" in {_victimName}
	replace all "{prefix}" with victim's prefix in {_victimName}
	replace all "{player}" with "%victim%" in {_victimName}
	#
	set {_attackerGold} to 0
	add {@kill-gold} to {_attackerGold}
	set {_uuid} to uuid of attacker
	if {passive-upgrades.%{_uuid}%.gold-boost} > 0:
		set {_lvl} to {passive-upgrades.%{_uuid}%.gold-boost}
		set {_boost} to 0
		if {_lvl} is 1:
			set {_boost} to rounded {_attackerGold} / 10
		else:
			if {_lvl} is 2:
				set {_boost} to rounded 20 * {_attackerGold} / 100
			else:
				if {_lvl} is 3:
					set {_boost} to rounded 30 * {_attackerGold} / 100
				else:
					if {_lvl} is 4:
						set {_boost} to rounded 40 * {_attackerGold} /100
					else:
						set {_boost} to rounded {_attackerGold} / 2
		add {_boost} to {_attackerGold}
	#
	if {pit.%uuid of victim%.streak} >= 5:
		set {_attackerBounty} to 0
		add {pit.%uuid of victim%.streak}*{@bounty-multiplicator} to {_attackerBounty}
		if attacker is online:
			broadcast "&6&lBOUNTY CLAIMED! %{_attackerName}% &7killed %{_victimName}% &7for &6&l%{_attackerBounty}%g"
		set {_uuid} to uuid of attacker
		if {passive-upgrades.%{_uuid}%.gold-boost} > 0:
			set {_lvl} to {passive-upgrades.%{_uuid}%.gold-boost}
			set {_boost} to 0
			if {_lvl} is 1:
				set {_boost} to rounded {_victimBounty} / 10
			else:
				if {_lvl} is 2:
					set {_boost} to rounded 20 * {_victimBounty} / 100
				else:
					if {_lvl} is 3:
						set {_boost} to rounded 30 * {_victimBounty} / 100
					else:
						if {_lvl} is 4:
							set {_boost} to rounded 40 * {_victimBounty} /100
						else:
							set {_boost} to rounded {_victimBounty} / 2
			add {_boost} to {_attackerBounty}
		add {_attackerBounty} to {_attackerGold}
	add {_attackerGold} to {pit.%uuid of attacker%.gold}
	#pit_scoreboard(attacker)
	#	
	set {_attackerXP} to 0
	set {_attackerXP} to {@kill-xp}
	if {passive-upgrades.%{_uuid}%.xp-boost} > 0:
		set {_lvl} to {passive-upgrades.%{_uuid}%.gold-boost}
		set {_boost} to 0
		if {_lvl} is 1:
			set {_boost} to rounded {_attackerXP} / 10
		else:
			if {_lvl} is 2:
				set {_boost} to rounded 20 * {_attackerXP} / 100
			else:
				if {_lvl} is 3:
					set {_boost} to rounded 30 * {_attackerXP} / 100
				else:
					if {_lvl} is 4:
						set {_boost} to rounded 40 * {_attackerXP} /100
					else:
						set {_boost} to rounded {_attackerXP} / 2
		add {_boost} to {_attackerXP}
	remove {_attackerXP} from {pit.%uuid of attacker%.xp-need}
	#
	add 1 to {pit.%uuid of attacker%.streak}
	if attacker is online:
		if {pit.%uuid of attacker%.streak} mod 5 = 0:
			broadcast "&c&lSTREAK! &7of &c%{pit.%uuid of attacker%.streak}% &7Kills by %{_attackerName}%"
	if {pit.%uuid of attacker%.streak} >= {@minStreakToBeBountied}:
		set {_bounty} to {pit.%uuid of attacker%.streak}*{@bounty-multiplicator}
		pit_bounty_tag(attacker, {_bounty})
	if {pit.%uuid of attacker%.level} <= 120:
		pit_check_level(attacker)
	#
	set {_messageKill} to "&a&lKill! &7on %{_victimName}% &b+{kill-xp}xp &6+{kill-gold}g"
	replace all "{kill-xp}" with "%{_attackerXP}%" in {_messageKill}
	replace all "{kill-gold}" with "%{_attackerGold}%" in {_messageKill}
	send "%{_messageKill}%" to attacker
	#
	set death message to ""
	clear drops
	if metadata value "ASSIST" of victim is set:
		set {_G} to metadata value "ASSIST" of victim
		if {_G} is not attacker:
			set {_uuid} to uuid of {_G}
			set {_x1} to "&a&lASSIST! &7on %{_victimName}% &b+{assist-xp}xp &6+{assist-gold}g"
			set {_attackerGold} to 0
			add {@assist-gold} to {_attackerGold}
			set {_uuid} to uuid of attacker
			if {passive-upgrades.%{_uuid}%.gold-boost} > 0:
				set {_lvl} to {passive-upgrades.%{_uuid}%.gold-boost}
				set {_boost} to 0
				if {_lvl} is 1:
					set {_boost} to rounded {_attackerGold} / 10
				else:
					if {_lvl} is 2:
						set {_boost} to rounded 20 * {_attackerGold} / 100
					else:
						if {_lvl} is 3:
							set {_boost} to rounded 30 * {_attackerGold} / 100
						else:
							if {_lvl} is 4:
								set {_boost} to rounded 40 * {_attackerGold} /100
							else:
								set {_boost} to rounded {_attackerGold} / 2
				add {_boost} to {_attackerGold}
			add {_attackerGold} to {pit.%{_uuid}%.gold}
		
			set {_attackerXP} to 0
			set {_attackerXP} to {@assist-xp}
			if {passive-upgrades.%{_uuid}%.xp-boost} > 0:
				set {_lvl} to {passive-upgrades.%{_uuid}%.gold-boost}
				set {_boost} to 0
				if {_lvl} is 1:
					set {_boost} to rounded {_attackerXP} / 10
				else:
					if {_lvl} is 2:
						set {_boost} to rounded 20 * {_attackerXP} / 100
					else:
						if {_lvl} is 3:
							set {_boost} to rounded 30 * {_attackerXP} / 100
						else:
							if {_lvl} is 4:
								set {_boost} to rounded 40 * {_attackerXP} /100
							else:
								set {_boost} to rounded {_attackerXP} / 2
				add {_boost} to {_attackerXP}
			remove {_attackerXP} from {pit.%{_uuid}%.xp-need}
			replace all "{assist-xp}" with "%{_attackerXP}%" in {_x1}
			replace all "{assist-gold}" with "%{_attackerGold}%" in {_x1}
			send "%{_x1}%" to {_G}
			pit_scoreboard({_G})
			delete metadata value "ASSIST" of victim
	
	
	send victim title "&c&lYOU DIED!" for 0.5 seconds
	if attacker is online:
		send "&c&lDEATH! &7by %{_attackerName}%" to victim
	make console execute command "nte player %victim% clear"
	pit_nametag(victim)
	wait 0.5 seconds
	pit_equip(victim)
	force victim to respawn
	#heal victim
	
	set {_victimBounty} to 0
	add {pit.%uuid of victim%.streak} to {_victimBounty}
	set {pit.%uuid of victim%.streak} to 0
	set {_victimBounty} to {_victimBounty}*{@bounty-multiplicator}
	set {_victimBounty} to {_victimBounty} / 2
	set {_uuid} to uuid of victim
	if {passive-upgrades.%{_uuid}%.gold-boost} > 0:
		set {_lvl} to {passive-upgrades.%{_uuid}%.gold-boost}
		set {_boost} to 0
		if {_lvl} is 1:
			set {_boost} to rounded {_victimBounty} / 10
		else:
			if {_lvl} is 2:
				set {_boost} to rounded 20 * {_victimBounty} / 100
			else:
				if {_lvl} is 3:
					set {_boost} to rounded 30 * {_victimBounty} / 100
				else:
					if {_lvl} is 4:
						set {_boost} to rounded 40 * {_victimBounty} /100
					else:
						set {_boost} to rounded {_victimBounty} / 2
		add {_boost} to {_victimBounty}
	add {_victimBounty} to {pit.%uuid of victim%.gold}
	pit_scoreboard(victim)

#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-#
#              FUNCTIONS				  #
#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-#
#SHOP FUNCTIONS
function pit_shop(p: player):	
	open virtual chest inventory with size 3 named "&4Non-Permanent Items" to {_p}
	wait 1 ticks
	create_slot({_p}, 10, "diamond_sword", "&bDiamond Sword", 1, 100, false, "||&8&l-&aDoes 20 percent more damage ||&a  to players with bounties")
	create_slot({_p}, 11, "arrow", "&7Arrow", 32, 20, false, "none")
	create_slot({_p}, 12, "obsidian", "&5Obsidian", 8, 40, false, "||&8&l-&aDissapear 2 minutes after being placed")
	create_slot({_p}, 15, "diamond_boots", "&bDiamond Boots", 1, 150, true, "||&8&l-&aAuto equip on buy")
	create_slot({_p}, 16, "diamond_chestplate", "&bDiamond Chestplate", 1, 250, true, "||&8&l-&aAuto equip on buy")

function create_slot(p: player, slotNumber: integer, item: text, itemName: text, cantitate: integer, gold: integer, equip: boolean, optionalLore: text):
	set {_lore} to "&8&l-&aLost on death||&8&l-&aCost: &6{gold}g{optionalLore}"
	replace all "{gold}" with "%{_gold}%" in {_lore}
	if {_optionalLore} is "none":
		replace all "{optionalLore}" with "" in {_lore}
	else:
		replace all "{optionalLore}" with "%{_optionalLore}%" in {_lore}
	make a gui slot {_slotNumber} of {_p} with {_cantitate} of {_item} parsed as item named {_itemName} with lore {_lore} to run:
		set {_item} to "%{_item}%"
		if gold({_p}, "has", {_gold}) is true:
			gold({_p}, "remove", {_gold})
			pit_scoreboard({_p})
			if {_equip} is true:
				if "%{_item}%" contain "chestplate":
					set {_p}'s chestplate to diamond_chestplate
				else:
					set {_p}'s boots to diamond_boots
			else:
				make console execute command "give %{_p}% %{_item}% %{_cantitate}%"
			set {_x} to {@message-item-purchase}
			replace all "{item}" with "%{_item}%" in {_x}
			replace all "{gold}" with "%{_gold}%" in {_x}
			send "%{_x}%" to {_p}
		else:
			set {_x} to {@message-not-enough-gold}
			replace all "{item}" with "%{_item}%" in {_x}
			send "%{_x}%" to {_p}
#END OF SHOP FUNCTIONS
function delete_passive_upgrades_when_prestige(p: player):
	set {_uuid} to uuid of {_p}
	set {passive-upgrades.%{_uuid}%.xp-boost} to 0
	set {passive-upgrades.%{_uuid}%.gold-boost} to 0
	set {passive-upgrades.%{_uuid}%.melee-damage} to 0
	set {passive-upgrades.%{_uuid}%.bow-damage} to 0
	set {passive-upgrades.%{_uuid}%.damage-reduction} to 0
	set {passive-upgrades.%{_uuid}%.build-battler} to 0
#PERK FUNCTIONS
function pit_perk_shop(p: player):
	open virtual chest inventory with size 3 named "&2Permanent Upgrades" to {_p}
	make gui slot 11 of {_p} with 1 blaze powder named "&a&lPassive Upgrades" to run:
		pit_passive_upgrades({_p})

function pit_passive_upgrades(p: player):
	open virtual chest inventory with size 3 named "&2Passive Upgrades" to {_p}
	set {_loreK} to "&8&l-&a{custom-lore}||&8&l-&aUpgrade to Tier {tierLevel} ||&8&l-&aCost: &6{gold}g"
	set {_lore} to {_loreK}
	replace all "{custom-lore}" with "Earn +10 percent XP from all sources" in {_lore}
	create_passive_slot({_p}, 10, "xp-boost", "exp_bottle", "&bXP Boost", {_lore}, 500, 1000, 2500, 10000, 25000)
	set {_lore} to {_loreK}
	replace all "{custom-lore}" with "Earn +10 percent gold from kills||&a  and coin pickups." in {_lore}
	create_passive_slot({_p}, 11, "gold-boost", "gold_ingot", "&6Gold Boost", {_lore}, 1000, 2500, 10000, 25000, 40000)
	set {_lore} to {_loreK}
	replace all "{custom-lore}" with "Deal +1 percent melee damage" in {_lore}
	create_passive_slot({_p}, 12, "melee-damage", "iron_sword", "&fMelee Damage", {_lore}, 450, 1050, 1500, 2250, 3000)
	set {_lore} to {_loreK}
	replace all "{custom-lore}" with "Deal +3 percent bow damage" in {_lore}
	create_passive_slot({_p}, 14, "bow-damage", "bow", "&eBow Damage", {_lore}, 450, 1050, 1500, 2250, 3000)
	set {_lore} to {_loreK}
	replace all "{custom-lore}" with "Recieve -1 percent damage" in {_lore}
	create_passive_slot({_p}, 15, "damage-reduction", "iron_chestplate", "&cDamage Reduction", {_lore}, 450, 1050, 1500, 2250, 3000)
	set {_lore} to {_loreK}
	replace all "{custom-lore}" with "Your blocks stay +60 percent longer" in {_lore}
	create_passive_slot({_p}, 16, "build-battler", "stone_bricks", "&2Build Battler", {_lore}, 750, 1750, 2750, 3750, 5000)

function create_passive_slot(p: player, slot: integer, variableName: text, item: text, itemName: text, lore: text, tier1: integer, tier2: integer, tier3: integer, tier4: integer, tier5: integer):
	set {_uuid} to uuid of {_p}
	set {_ok} to 0
	add {passive-upgrades.%{_uuid}%.%{_variableName}%} to {_ok}
	if {_ok} is 0:
		set {_okGold} to {_tier1}
	else:
		if {_ok} is 1:
			set {_okGold} to {_tier2}
		else:
			if {_ok} is 2:
				set {_okGold} to {_tier3}
			else:
				if {_ok} is 3:
					set {_okGold} to {_tier4}
				else:
					if {_ok} is 4:
						set {_okGold} to {_tier5}
					else:
						set {_okGold} to 999999999 
	one_tier({_p}, {_slot}, {_variableName}, {_item}, {_itemName}, {_lore}, {_ok}, {_okGold})
			
function one_tier(p: player, slot: integer, variableName: text, item: text, itemName: text, lore: text, tier: integer, tierGold: integer):
	if {_tierGold} is 999999999:
		make a gui slot {_slot} of {_p} with {_item} parsed as item with name {_itemName} with lore "&8&l-&4MAX LEVEL"
	else:
		add 1 to {_tier}
		replace all "{tierLevel}" with "%{_tier}%" in {_lore}
		replace all "{gold}" with "%{_tierGold}%" in {_lore}
		set {_uuid} to uuid of {_p}
		make a gui slot {_slot} of {_p} with {_item} parsed as item with name {_itemName} with lore {_lore} to close then run function pit_perk_shop({_p}):
			if gold({_p}, "has", {_tierGold}) is true:
				gold({_p}, "remove", {_tierGold})
				set {passive-upgrades.%{_uuid}%.%{_variableName}%} to {passive-upgrades.%{_uuid}%.%{_variableName}%} + 1
				send "{@messageUpgradeBought}" to {_p}
				pit_scoreboard({_p})
			else:
				send "{@messageNotEnoughGoldToUpgrade}" to {_p}
#END OF PERK FUNCTIONS	
#->JOIN FUNCTIONS
function pit_join(p: player):
	set {_uuid} to uuid of {_p}
	teleport {_p} to {pit.spawn}
	if {pit.%{_uuid}%.level} is not set:
		set {pit.%{_uuid}%.level} to 1
	if {pit.%{_uuid}%.prestige} is not set:
		set {pit.%{_uuid}%.prestige} to 0	
	if {pit.%{_uuid}%.xp-need} is not set:
		set {pit.%{_uuid}%.xp-need} to 100	
	if {pit.%{_uuid}%.gold} is not set:
		set {pit.%{_uuid}%.gold} to 0	
	set {pit.%{_uuid}%.streak} to 0
	set {pit.%{_uuid}%.status} to "&aIdling"
	pit_clear({_p})
	pit_equip({_p})
	pit_nametag({_p})
	pit_scoreboard({_p})
	
function pit_clear(p: player):	
	clear {_p}'s inventory
	clear {_p}'s level
	remove all effects from {_p}
	
function armor_equip(p: player, x: integer):
	set {_p}'s chestplate to {START-KIT::%{_x}%::1}
	set {_p}'s leggings to {START-KIT::%{_x}%::2}
	set {_p}'s boots to {START-KIT::%{_x}%::3}
	
function pit_equip(p: player):
	set {_uuid} to uuid of {_p}
	set {_p}'s level to {pit.%{_uuid}%.level}
	set slot 0 of {_p} to unbreakable iron_sword
	set slot 1 of {_p} to unbreakable bow
	set slot 8 of {_p} to 30 arrows
	set {_rand} to random integer between 1 and 3
	armor_equip({_p}, {_rand})
#<- END OF JOIN FUNCTIONS	
#->SCOREBOARD FUNCTIONS
function pit_scoreboard(p: player):
	set {_uuid} to uuid of {_p}
	set {_prestige} to {pit.%{_uuid}%.prestige}
	if stylish scoreboard "Pit-%{_p}%" does not exist:
		create new stylish scoreboard named "PIT-%{_p}%"
		if {_prestige} is 0:
			set {_lines} to 10
		else:
			set {_lines} to 11
		loop {_lines} times:
			create a new id based score "PIT-%{_p}%Slot%loop-number%" with text "&%loop-number%" slot loop-number for stylish scoreboard "PIT-%{_p}%"
	set stylish scoreboard of {_p} to "PIT-%{_p}%"				
	set title of stylish scoreboard "PIT-%{_p}%" to "&e&l The Atlantis PIT "
	set {_x} to "{prestige_color}[{level_color}{level}{prestige_color}]"
	replace all "{prestige_color}" with pit_get_prestige_color({_p}) in {_x}
	replace all "{level_color}" with pit_get_color({_p}) in {_x}
	replace all "{level}" with "%{pit.%{_uuid}%.level}%" in {_x}
	if {_prestige} is 0:
		set the text of id "PIT-%{_p}%Slot10" to "&7%now%"
		set the text of id "PIT-%{_p}%Slot9" to "&e"
	else:
		set the text of id "PIT-%{_p}%Slot11" to "&7%now%"
		set the text of id "PIT-%{_p}%Slot10" to " "
		set {_prestige} to {pit.%{_uuid}%.prestige}
		set the text of id "PIT-%{_p}%Slot9" to "&fPrestige: %{PRESTIGES::%{_prestige}%}%"
	set the text of id "PIT-%{_p}%Slot8" to "&fLevel: %{_x}%"
	set the text of id "PIT-%{_p}%Slot7" to "&fNeeded XP: &b%{pit.%{_uuid}%.xp-need}%"
	set the text of id "PIT-%{_p}%Slot6" to "&d"
	set the text of id "PIT-%{_p}%Slot5" to "&fStatus: %{pit.%{_uuid}%.status}%"
	set the text of id "PIT-%{_p}%Slot4" to "&fGold: &6%{pit.%{_uuid}%.gold}%g"
	set the text of id "PIT-%{_p}%Slot3" to "&fStreak: &a%{pit.%{_uuid}%.streak}%"
	set the text of id "PIT-%{_p}%Slot2" to "&6"
	set the text of id "PIT-%{_p}%Slot1" to "&emc.atlantis-nt.com"
#<-END OF SCOREBOARD FUNCTIONS		
#->NAMETAG FUNCTIONS
function pit_nametag(p: player):
	set {_nametag} to {@nametag-format}
	replace all "{prestige_color}" with pit_get_prestige_color({_p}) in {_nametag}
	replace all "{level_color}" with pit_get_color({_p}) in {_nametag}
	set {_uuid} to uuid of {_p}
	replace all "{level}" with "%{pit.%{_uuid}%.level}%" in {_nametag}
	replace all "{prefix}" with {_p}'s prefix in {_nametag}
	make console execute command "nte player %{_p}% prefix %{_nametag}%"
function pit_bounty_tag(p: player, bounty: number):
	set {_nametag} to {@bounty-nametag-format}
	replace all "{gold}" with "%{_bounty}%" in {_nametag}
	make console execute command "nte player %{_p}% suffix %{_nametag}%"
#<-END OF NAMETAG FUNCTIONS
#->COLOR FUNCTIONS
function pit_get_color(p: player) :: string:
	set {_uuid} to uuid of {_p}
	set {_level} to "%{pit.%{_uuid}%.level}%" parsed as integer
	if {_level} <= 9:
		return "&7"
	if {_level} <=19:
		return "&1"
	if {_level} <=29:
		return "&3"
	if {_level} <=39:
		return "&2"
	if {_level} <=49:
		return "&a"
	if {_level} <=59:
		return "&e"
	if {_level} <=69:
		return "&6&l"
	if {_level} <=79:
		return "&c&l"
	if {_level} <=89:
		return "&4&l"
	if {_level} <=99:
		return "&5&l"
	if {_level} <=109:
		return "&d&l"
	if {_level} <=119:
		return "&f&l"
	if {_level} = 120:
		return "&b&l"
function pit_get_prestige_color(p: player) :: string:
	set {_uuid} to uuid of {_p}
	set {_prestige} to "%{pit.%{_uuid}%.prestige}%" parsed as integer
	if {_prestige} = 0:
		return "&7"
	if {_prestige} <= 4:
		return "&9"
	if {_prestige} <= 9:
		return "&e"
	if {_prestige} <=14:
		return "&6"
	if {_prestige} <=19:
		return "&c"
	if {_prestige} <=24:
		return "&5"
	if {_prestige} = 30:
		return "&4"
	return "&d"
#<- END OF COLOR FUNCTIONS

function pit_check_level(p: player):	
	set {_uuid} to uuid of {_p}
	if {pit.%{_uuid}%.xp-need} <= 0:
		if {pit.%{_uuid}%.level} = 120:
			set {pit.%{_uuid}%.xp-need} to 0
			pit_scoreboard({_p})
			stop
		else:
			set {_old} to "{prestige}[{color}{level}{prestige}]"
			replace all "{prestige}" with pit_get_prestige_color({_p}) in {_old}
			replace all "{color}" with pit_get_color({_p}) in {_old}
			replace all "{level}" with "%{pit.%{_uuid}%.level}%" in {_old}
			add 1 to {pit.%{_uuid}%.level}
			send "&b&lLevel Up!" to {_p}
			set {_x} to "&3&lLEVEL UP!"
			set {_y} to "{old} &8&l-> {new}"
			replace all "{old}" with "%{_old}%" in {_y}	
			set {_new} to "{prestige}[{color}{level}{prestige}]"
			replace all "{prestige}" with pit_get_prestige_color({_p}) in {_new}
			replace all "{color}" with pit_get_color({_p}) in {_new}
			replace all "{level}" with "%{pit.%{_uuid}%.level}%" in {_new}
			replace all "{new}" with "%{_new}%" in {_y}		
			send {_p} title "%{_x}%" with subtitle "%{_y}%" for 3 seconds
			play sound "ENTITY_ENDERDRAGON_SHOOT" to {_p} with volume 100 and pitch 100
			set {_p}'s level to {pit.%{_uuid}%.level}
			if {pit.%{_uuid}%.level} > 1:
				set {pit.%{_uuid}%.xp-need} to 100*{pit.%{_uuid}%.level}
			else:
				add 100 to {pit.%{_uuid}%.xp-need}	
			pit_nametag({_p})
	pit_scoreboard({_p})
function gold(p: player , action: text, x: integer) :: boolean:
	set {_uuid} to uuid of {_p}
	if {_action} is "has":
		if {pit.%{_uuid}%.gold} >= {_x}:
			return true
		else:
			return false
	if {_action} is "remove":
		remove {_x} from {pit.%{_uuid}%.gold}
#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-#
#               COMMANDS				  #
#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-#
command /pit [<text>] [<player>] [<integer>]:
	trigger:
		if arg-1 is not set:
			make player execute command "pit help"
			stop
		if arg-1 is "help":
			send "&7&l&m------------------&r &7&l&m------------------"
			send "{@cmdPrefix} {@cmdColor}spawn"
			send "{@cmdPrefix} {@cmdColor}rankup &8( &eon level &b120&e, rankup to the next &bprestige&8 )"
			if player have permission "pit.admin":
				send "{@cmdPrefix} {@cmdColor}Reload"
				send "{@cmdPrefix} {@cmdColor}AddGold {@pn}"
				send "{@cmdPrefix} {@cmdColor}SetGold {@pn}"
				send "{@cmdPrefix} {@cmdColor}SetLevel {@pn}"
				send "{@cmdPrefix} {@cmdColor}AddXP {@pn}"
				send "{@cmdPrefix} {@cmdColor}SetPrestige {@pn}"
				send "{@cmdPrefix} {@cmdColor}SetShop"
				send "{@cmdPrefix} {@cmdColor}SetPerkShop"
				send "{@cmdPrefix} {@cmdColor}SetRenownShop"
			stop
		if arg-1 is "spawn":
			if {pit.%uuid of player%.status} is "&aIdling":
				remove all golden_apple from player
				remove all heads from player
				teleport player to {pit.spawn}
				stop
			else:
				send "&cYou are in fight!"
				stop
		if arg-1 is "rankup":
			if {pit.%uuid of player%.level} is 120:
				if {pit.%uuid of player%.xp-need} is 0:
					if {pit.%uuid of player%.prestige} >= 30:
						send "&cYou are on &4Max &cprestige level!"
						stop
					else:
						delete_passive_upgrades_when_prestige(player)
						add 1 to {pit.%uuid of player%.prestige}
						set {pit.%uuid of player%.level} to 1
						set {pit.%uuid of arg-2%.xp-need} to 100*{pit.%uuid of arg-2%.level}
						pit_nametag(player)
						pit_scoreboard(player)
						stop
				else:
					send "&cYou must have &b0 &cneeded xp to rankup!"
					stop
			else:
				send "&cYou must have level &b120 &cto rankup!"
				stop
		if player have permission "pit.admin":
			if arg-1 is "reload":
				make player execute command "skript reload ThePit"
				stop
			if arg-1 is "setspawn":
				set {pit.spawn} to player's location
				send "&bSpawn &7setted" to player
				stop
			if arg-1 is "setgold":
				if arg-2 is set:
					if arg-3 is set:
						set {pit.%uuid of arg-2%.gold} to arg-3
						send "&7Setted &6%arg-2%&7's gold to &6%arg-3%&7!"
						pit_scoreboard(arg-2)
						stop
					else:
						send "&cSyntax error!"
						stop
				else:
					send "&cSyntax error!"
					stop
			if arg-1 is "addgold":
				if arg-2 is set:
					if arg-3 is set:
						add arg-3 to {pit.%uuid of arg-2%.gold} 
						send "&7Added &6%arg-3% &7gold to &6%arg-2%&7's gold!"
						pit_scoreboard(arg-2)
						stop
					else:
						send "{@error}"
						stop
				else:
					send "{@error}"
					stop
			if arg-1 is "setlevel":
				if arg-2 is set:
					if arg-3 is set:
						if arg-3 > 120:
							send "&cMax level is &b120&c!"
						else:
							set {pit.%uuid of arg-2%.level} to arg-3
							set {pit.%uuid of arg-2%.xp} to 0
							set {pit.%uuid of arg-2%.xp-need} to 100*{pit.%uuid of arg-2%.level}
							pit_nametag(arg-2)
							pit_scoreboard(arg-2)
							send "&7Setted &b%arg-2%&7's level to &b%arg-3%&7!"
						stop
					else:
						send "{@error}"
						stop
				else:
					send "{@error}"
					stop
			if arg-1 is "addxp":
				if arg-2 is set:
					if arg-3 is set:
						set {_uuid} to uuid of arg-2
						remove arg-3 from {pit.%{_uuid}%.xp-need}
						pit_check_level(arg-2)
						stop
					else:
						send "{@error}"
						stop
				else:
					send "{@error}"
					stop
			if arg-1 is "setprestige":
				if arg-2 is set:
					if arg-3 is set:
						if arg-3 > 30:
							send "&cMax prestige is &430&c!"
						else:
							set {pit.%uuid of arg-2%.prestige} to arg-3
							pit_nametag(arg-2)
							pit_scoreboard(arg-2)
							send "&7Setted &b%arg-2%&7's prestige to &b%arg-3%&7!"
						stop
					else:
						send "{@error}"
						stop
				else:
					send "{@error}"
					stop
			if arg-1 is "setshop":
				if citizen id of target entity is set:
					set {SHOP-ID} to citizen id of target entity
					send "&7Shop setted!"
					stop
			if arg-1 is "setperkshop":
				if citizen id of target entity is set:
					set {PERK-SHOP-ID} to citizen id of target entity
					send "&7Perk Shop setted!"
					stop
		else:
			send "&cYou do not have permission to perform this command!"
					
#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-#
#             ON SOME EVENTS			  #
#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-#
on script load:
	delete {START-KIT::*}
	add unbreakable iron_chestplate to {START-KIT::1::*}
	add unbreakable chain_leggings to {START-KIT::1::*}
	add unbreakable chain_boots to {START-KIT::1::*}
	add unbreakable chain_chestplate to {START-KIT::2::*}
	add unbreakable iron_leggings to {START-KIT::2::*}
	add unbreakable chain_boots to {START-KIT::2::*}
	add unbreakable chain_chestplate to {START-KIT::3::*}
	add unbreakable chain_leggings to {START-KIT::3::*}
	add unbreakable iron_boots to {START-KIT::3::*}
	delete {PRESTIGES::*}
	add "&9I","&9II","&9III","&9IV","&eV","&eVI","&eVII","&eVIII","&eIX","&6X","&6XI","&6XII","&6XIII","&6XIV","&cXV","&cXVI","&cXVII","&cXVIII","&cXIX","&6XX","&6XXI","&6XXII","&6XXIII","&6XXIV","&dXXV","&dXXVi","&dXXVII","&dXXVIII", "&dXXIX" and "&4MAX" to {PRESTIGES::*}
on join:
	pit_join(player)
on quit:
	set {_uuid} to uuid of player
	delete stylish scoreboard "PIT-%player%"
	delete {pit.%{_uuid}%.streak}
	delete {pit.%{_uuid}%.state}
	delete {pit.%{_uuid}%.damage::*}
	make console execute command "nte player %player% clear"	
on chat:
	cancel event
	set {_x} to {@chat-format}
	replace all "{color}" with pit_get_color(player) in {_x} 
	replace all "{prestige}" with pit_get_prestige_color(player) in {_x}
	replace all "{level}" with "%{pit.%uuid of player%.level}%" in {_x}
	replace all "{player}" with "%player%" in {_x}
	replace all "{prefix}" with player's prefix in {_x}			
	replace all "&" with " " in message	
	replace all "{message}" with message in {_x} 	
	broadcast "%{_x}%"
on place:
	if player does not have permission "pit.admin":
		if event-block is obsidian:
			set {_uuid} to uuid of player
			set {_lvl} to {passive-upgrades.%{_uuid}%.build-battler}
			if {_lvl} is 0:
				wait 120 seconds
			else:
				if {_lvl} is 1:
					wait 192 seconds
				else:
					if {_lvl} is 2:
						wait 204 seconds
					else:
						if {_lvl} is 3:
							wait 198 seconds
						else:
							if {_lvl} is 4:
								wait 228 seconds
							else:
								if {_lvl} is 5:
									wait 240 seconds
			set event-block to air
		else:
			cancel event
	else:
		if event-block is obsidian:
			set {_uuid} to uuid of player
			set {_lvl} to {passive-upgrades.%{_uuid}%.build-battler}
			if {_lvl} is 0:
				wait 120 seconds
			else:
				if {_lvl} is 1:
					wait 192 seconds
				else:
					if {_lvl} is 2:
						wait 204 seconds
					else:
						if {_lvl} is 3:
							wait 198 seconds
						else:
							if {_lvl} is 4:
								wait 228 seconds
							else:
								if {_lvl} is 5:
									wait 240 seconds
			set event-block to air
on right click with head:
	if name of event-item is "&6&lGolden Head":
		cancel event
		remove regeneration from player
		remove absorption from player
		apply regeneration 2 to the player for 5 seconds
		apply absorption 1 to the player for 120 seconds
		remove 1 of event-item from player
on right click on entity:
	if citizen id of event-entity is {SHOP-ID}:
		pit_shop(player)
	if citizen id of event-entity is {PERK-SHOP-ID}:
		pit_perk_shop(player)
on right click on ender_chest:
	if {pit.%uuid of player%.level} < {@ender_chest_min_level}:
		send "&cYou must have at least level &b15 &cto open it!"
		cancel event
on break:
	if player does not have the permission "pit.admin":
		event-block is not stationary_lava
		cancel event
on block flow:
	if event-block is lava:
		cancel event
on command:
	if full command is "spawn":
		cancel event
		make player execute command "pit spawn"
on drop:
	if player does not have permission "pit.admin":
		cancel event
on pressure plate:
	cancel event	
	push the player upwards at speed 0.5
	push the player forwards at speed 0.7
at 18:00:
	set time to 7:00
on hunger bar change:
	cancel event		
	set player's hunger to 20
		
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	